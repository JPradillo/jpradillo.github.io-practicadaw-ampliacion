{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pr\u00e1ctica Ampliaci\u00f3n","text":"<p>En esta web documentaremos, paso a paso desde 0, como configurar un servidor Nginx con Host Virtuales y directorios de usuario para poder alojar varios sitios web en un solo servidor. Lo que se pretende es que cada host apunte al directorio public_html de los distintos usuarios del sistema operativo Debian para que cada usuario gestiones su propio sitio web desde su carpeta personal.</p>"},{"location":"#conexion-por-ssh","title":"Conexi\u00f3n por SSH","text":"<p>Para ello utilizaremos SSH para interactuar con el servidor. Es muy sencillo conectarnos por SSH a nuestra m\u00e1quina virutal desde nuestra m\u00e1quina anfitriona. </p> <ol> <li>Ejecutar PowerShell como administrador</li> <li> <p>Abrir la m\u00e1quina virtual y escribir el comando <code>ip a</code> para conseguir la ip de nuestra m\u00e1quina.</p> <p></p> </li> <li> <p>Una vez obtenida la ip de nuestra m\u00e1quina, ejecutamos el comando <code>ssh nuestro_usuario@ip_maquina</code> y vamos respondiendo lo que nos pide.</p> <p></p> </li> <li> <p>La confirmaci\u00f3n de que estamos conectados es que nos aparezca en la zona de la ubicaci\u00f3n donde nos encontramos, el <code>usuario@host_maquina</code>.</p> <p></p> </li> </ol>"},{"location":"#instalacion-de-nginx","title":"Instalaci\u00f3n de Nginx","text":"<p>Para esta pr\u00e1ctica se utilizar\u00e1 un servidor Nginx y para ello tenemos que proceder a su sencilla instalaci\u00f3n.</p> <ol> <li>Actualizamos la lista de paquetes con el comando <code>sudo apt update</code>.</li> <li> <p>Instalamos Nginx con el comando <code>sudo apt install nginx</code>.</p> <p></p> </li> <li> <p>Para comprobar que la instalaci\u00f3n ha sido exitosa simplemente tenemos que ejecutar el comando <code>sudo systemctl status nginx</code> y nos tiene que salir un mensaje parecido a este.</p> <p></p> </li> </ol>"},{"location":"#creacion-de-usuarios","title":"Creaci\u00f3n de usuarios","text":"<p>Para esta pr\u00e1ctica tendremos que crear dos nuevos usuarios y asignarles una buena contrase\u00f1a.</p>"},{"location":"#usuario1","title":"Usuario1","text":""},{"location":"#usuario2","title":"Usuario2","text":"<p>En el directorio <code>home</code> de cada uno de los usuarios tendremos que crear la carpeta <code>public_html</code>. Para ello simplemente tenemos que ejecutar el comando <code>sudo mkdir /home/usuario#/public_html</code> para cada uno de los usuarios.</p> <p></p>"},{"location":"#permisos","title":"Permisos","text":"<p>Es importante dar los respectivos permisos a las carpetas creadas para que Nginx pueda acceder a ellas sin que la propiedad y los archivos que contienen se pierdan por parte del usuario. Es muy sencillo, s\u00f3lo hay que ejecutar los siguientes comandos.</p> <p>Damos permiso para que s\u00f3lo el usuario1 pueda leer, escribir y ejecutar en el directorio y el resto de usuarios y servicios puedan ejecutar solamente.</p> <ul> <li><code>sudo chmod 711 /home/usuario1</code> </li> <li> <p><code>sudo chmod 711 /home/usuario2</code></p> <p></p> </li> </ul> <p>Cambiamos recursivamente el propietario y grupo del directorio /home/usuario1/public_html (y todo su contenido) al usuario y grupo www-data, que es utilizado por servidores web como Nginx o Apache, para que el servidor web pueda leer, escribir o gestionar los archivos de ese directorio. </p> <p>Adem\u00e1s le damos permisos al propietario para que pueda leer, escribir y ejecutar de forma recursiva en todos los archivos y directorios dentro de la carpeta <code>public_html</code> de cada usuario y tambi\u00e9n permisos de lectura y ejecuci\u00f3n al resto de usuarios y grupos.  </p> <ul> <li><code>sudo chown -R www-data:www-data /home/usuario1/public_html</code></li> <li><code>sudo chown -R www-data:www-data /home/usuario2/public_html</code></li> <li><code>sudo chmod -R 755 /home/usuario1/public_html</code></li> <li> <p><code>sudo chmod -R 755 /home/usuario2/public_html</code></p> <p></p> </li> </ul>"},{"location":"#creacion-de-las-paginas-web","title":"Creaci\u00f3n de las p\u00e1ginas web","text":"<p>En la carpeta <code>public_html</code> que hemos creado en cada uno de los usuarios, creamos una p\u00e1gina web sencilla. En mi caso se tratan de dos web con un <code>&lt;p&gt;</code> similar y un <code>&lt;h1&gt;</code> indicando cada uno de los usuarios, para posteriormente poder diferenciarlas en cada una de las web.</p>"},{"location":"#usuario-1","title":"Usuario 1","text":""},{"location":"#usuario-2","title":"Usuario 2","text":""},{"location":"#hosts-virtuales","title":"Hosts virtuales","text":"<p>Creamos los hosts virtuales para cada uno de los usuarios en el directorio <code>/etc/nginx/sites-available/</code>. Para poder diferenciarlos le damos el nombre de usuario como nombre del archivo de configuraci\u00f3n.</p> <p>Para la configuraci\u00f3n, solamente tenemos que poner este bloque, provocando que ya podamos conectarnos por HTTP a la aplicaci\u00f3n web.</p> <pre><code>server {\n    listen 80;\n    server_name usuarioN.local;     # En la 'N' va el n\u00famero de usuario\n\n    root /home/usuarioN/public_html;\n    index index.html;\n\n    return 301 https://$server_name$request_uri;\n\n    location / {\n        try_files $uri /$uri =404;\n    }\n}\n</code></pre>"},{"location":"#usuario-1_1","title":"Usuario 1","text":""},{"location":"#usuario-2_1","title":"Usuario 2","text":""},{"location":"#habilitacion-de-los-archivos-de-configuracion","title":"Habilitaci\u00f3n de los archivos de configuraci\u00f3n","text":"<p>Creamos enlaces simb\u00f3licos en <code>sites-enabled</code> para habilitar los archivos de configuraci\u00f3n. Para ello ejecutamos el comando <code>sudo ln -s /etc/nginx/sites-available/usuario# /etc/nginx/sites-enabled</code> donde el # ser\u00e1 el n\u00famero de usuario</p> <p></p> <p>Para comprobar si est\u00e1n correctamenet configurados simplemente tenemos que ejecutar el comando <code>ls -l /etc/nginx/sites-enabled/</code> y de esta forma nos saldr\u00e1n los distintos archivos y los permisos que tiene cada uno.</p> <p></p>"},{"location":"#reiniciamos-nginx","title":"Reiniciamos nginx","text":"<p>Para que todos estos cambios se puedan ver, debemos reiniciar Nginx. De esta forma actualizar\u00e1 toda la configuraci\u00f3n que tiene programada por defecto y aplica. Tambi\u00e9n si hay algun tipo de error, el reinicio fallar\u00e1 y no se iniciar\u00e1 Nginx, lo que har\u00e1 que nos demos cuenta de si alg\u00fan archivo de configuraci\u00f3n de los que hemos creado, est\u00e1 mal hecho. Para reiniciarlo simplemente debemos ejecutar el comando <code>sudo systemctl restart nginx.service</code> y ya, si todo ha sido correctamente editado, se aplicar\u00e1n los cambios realizados y nos mostrar\u00e1 el siguiente mensaje.</p> <p></p>"},{"location":"#configuracion-archivo-etchosts","title":"Configuraci\u00f3n archivo <code>/etc/hosts</code>","text":"<p>Para que podamos acceder a los sitios web mediante los nombres ficticios de dominio desde nuestra m\u00e1quina, primero debemos configurar el archivo <code>/etc/hosts</code> y adjudicar el dominio que queramos para nuestra web a nuestra ip local. En este paso es importante ponerle el nombre que hemos puesto en la configuraci\u00f3n del archivo <code>/etc/nginx/sites-available/</code>, en mi caso <code>usuario#.local</code>.</p> <p></p>"},{"location":"#resultados-http","title":"Resultados http","text":"<p>Una vez hecho todo este proceso ya podemos probar a acceder a las webs:</p> <ul> <li> <p>http://usuario1.local</p> <p> </p> </li> <li> <p>http://usuario2.local</p> <p></p> </li> </ul>"},{"location":"#https","title":"HTTPS","text":""},{"location":"#ssl","title":"SSL","text":"<p>Para poder crear la configuraci\u00f3n para que nos redirija a HTTPS cada vez que tratemos de entrar a la web, primero crearemos una clave SSL que caduque, por ejemplo, dentro de un a\u00f1o y de esta forma hacer que sea necesario autentificarse para tener mayor seguridad.</p> <p>Para ello ejecutamos el siguiente comando:</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt\n</code></pre> <p>Con este comando lo que conseguimos es generar un certificado SSL autofirmado y su correspondiente clave privada para el servidor de Nginx y lo guarda en rutas expec\u00edficas (<code>server.key</code> para la clave privada y <code>server.crt</code> para el certificado.).</p> <p>Despues vamos rellenando los campos que nos pide. </p>"},{"location":"#puerto-443-ssl","title":"Puerto 443 ssl","text":"<p>Configuraci\u00f3n del puerto 443 ssl en el archivo <code>/etc/nginx/sites-available/usuarioN</code>. Para ello simplemente tenemos que a\u00f1adir el siguiente bloque al documento.</p> <pre><code>server {\n    listen 443 ssl;\n\n    ssl_certificate /etc/nginx/ssl/server.crt;\n    ssl_certificate_key /etc/nginx/ssl/server.key;\n\n    ssl_protocols TLSv1.3;\n    ssl_ciphers ECH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n    server_name usuarioN.local;\n    access_log /var/log/nginx/https_access.log;\n\n    root /home/usuarioN/public_html;\n    index index.html;\n\n    location / {\n        root /home/usuarioN/public_html;\n        index index.html;\n    }\n}\n</code></pre>"},{"location":"#usuario-1_2","title":"Usuario 1","text":""},{"location":"#usuario-2_2","title":"Usuario 2","text":""},{"location":"#resultados-https","title":"Resultados HTTPS","text":"<p>Al intentar acceder a http://usuario1.local o http://usuario2.local lo que pasa es que autom\u00e1ticamente somos redireccionados a la web https de cada una de las aplicaciones con la confiugraci\u00f3n que hemos establecido anteriormente. </p>"},{"location":"#httpusuario1local","title":"http://usuario1.local","text":""},{"location":"#httpusuario2local","title":"http://usuario2.local","text":""}]}